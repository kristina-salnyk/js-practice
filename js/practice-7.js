// –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. forEach

// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
// –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

// createProduct(obj, callback) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ id, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–±–µ–∫.
// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –æ–±—å–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Å–≤–æ–π—Å—Ç–≤–æ
//  id –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—å–µ–∫—Ç. logProduct(product) -
// –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π
// –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

// –†–µ—à–µ–Ω–∏–µ
const createProduct = (obj, callback) => {
  callback({ id: Date.now(), ...obj });
};

const logProduct = product => {
  console.log('Product: ', product);
};

const logTotalPrice = product => {
  console.log(product.price * product.quantity);
};

createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);

// Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
// –î–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–∫—Ç—É account –º–µ—Ç–æ–¥—ã withdraw(amount, onSuccess, onError) –∏
// deposit(amount, onSuccess, onError), –≥–¥–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏,
// –∞ –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π - –∫–æ–ª–±–µ–∫–∏. –ú–µ—Ç–æ–¥ withdraw –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount
// –±–æ–ª—å—à–µ TRANSACTION_LIMIT –∏–ª–∏ this.balance, –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
// –ú–µ—Ç–æ–¥ deposit –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ TRANSACTION_LIMIT –∏–ª–∏ –º–µ–Ω—å—à–µ
// –ª–∏–±–æ —Ä–∞–≤–µ–Ω –Ω—É–ª—é, –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

// –†–µ—à–µ–Ω–∏–µ
const TRANSACTION_LIMIT = 1000;

const account = {
  name: 'Jacob',
  balance: 400,
  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) onError('Limit is exceeded');
    else if (amount > this.balance)
      onError(`Amount exceeds your balance. Balance: ${this.balance}`);
    else {
      this.balance -= amount;
      onSuccess(`Your balance: ${this.balance}`);
    }
  },
  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) onError('Limit is exceeded');
    else if (amount <= 0) onError('Amount is not positive');
    else {
      this.balance += amount;
      onSuccess(`Your balance: ${this.balance}`);
    }
  },
};

const handleSuccess = message => {
  console.log(`‚úÖ Success! ${message}`);
};
const handleError = message => {
  console.log(`‚ùå Error! ${message}`);
};

account.withdraw(2000, handleSuccess, handleError);
account.withdraw(600, handleSuccess, handleError);
account.withdraw(300, handleSuccess, handleError);
account.deposit(1700, handleSuccess, handleError);
account.deposit(0, handleSuccess, handleError);
account.deposit(-600, handleSuccess, handleError);
account.deposit(600, handleSuccess, handleError);

// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é each(array, callback), –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç
// –º–∞—Å—Å–∏–≤, –∞ –≤—Ç–æ—Ä—ã–º - —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞.
// –§—É–Ω–∫—Ü–∏—è each –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
// –≤—ã–∑–æ–≤–∞ –∫–æ–ª–ª–±–µ–∫–∞.

// –†–µ—à–µ–Ω–∏–µ

const each = (array, callback) => {
  const newArray = [];
  array.forEach(element => {
    newArray.push(callback(element));
  });
  return newArray;
};

console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return value * 2;
  })
);
console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return value - 10;
  })
);
console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return Math.sqrt(value);
  })
);
console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.ceil(value);
  })
);
console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.floor(value);
  })
);

// Example 4 - –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

const createProductNew = (partialProduct, callback) =>
  callback({ id: Date.now(), ...partialProduct });

const logProductNew = product => console.log(product);

const logTotalPriceNew = product => console.log(product.price * product.quantity);

createProductNew({ name: 'üçé', price: 30, quantity: 3 }, logProductNew);
createProductNew({ name: 'üçã', price: 20, quantity: 5 }, logTotalPriceNew);

// Example 5 - –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

const accountNew = {
  username: 'Jacob',
  balance: 400,
  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else if (amount > this.balance) {
      onError(`Amount can't exceed account balance of ${this.balance} credits`);
    } else {
      this.balance -= amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else if (amount <= 0) {
      onError(`Amount must be more than 0 credits`);
    } else {
      this.balance += amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
};

const handleSuccessNew = message => console.log(`‚úÖ Success! ${message}`);

const handleErrorNew = message => console.log(`‚ùå Error! ${message}`);

account.withdraw(2000, handleSuccessNew, handleErrorNew);
account.withdraw(600, handleSuccessNew, handleErrorNew);
account.withdraw(300, handleSuccessNew, handleErrorNew);
account.deposit(1700, handleSuccessNew, handleErrorNew);
account.deposit(0, handleSuccessNew, handleErrorNew);
account.deposit(-600, handleSuccessNew, handleErrorNew);
account.deposit(600, handleSuccessNew, handleErrorNew);

// Example 6 - –ò–Ω–ª–∞–π–Ω —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

const eachNew = (array, callback) => {
  const newArr = [];
  for (const el of array) {
    newArr.push(callback(el));
  }
  return newArr;
};

console.log(eachNew([64, 49, 36, 25, 16], value => value * 2));
console.log(eachNew([64, 49, 36, 25, 16], value => value - 10));
console.log(eachNew([64, 49, 36, 25, 16], value => Math.sqrt(value)));
console.log(eachNew([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.ceil(value)));
console.log(eachNew([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.floor(value)));

// Example 7 - –ú–µ—Ç–æ–¥ forEach
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ forEach –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

const logItems = items => {
  console.log(items);
  // for (let i = 0; i < items.length; i += 1) {
  items.forEach((element, index) => console.log(`${index + 1} - ${element}`));
  // }
};

logItems(['Mango', 'Poly', 'Ajax']);
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

// Example 8 - –ú–µ—Ç–æ–¥ forEach
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ forEach –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

const printContactsInfo = ({ names, phones }) => {
  const data = [];
  names.split(',').forEach(element => {
    data.push(new Array(element));
  });
  phones.split(',').forEach((element, index) => {
    data[index].push(element);
  });
  // for (let i = 0; i < nameList.length; i += 1) {
  data.forEach(element => console.log(`${element[0]}: ${element[1]}`));
  // }
};

printContactsInfo({
  names: 'Jacob,William,Solomon,Artemis',
  phones: '89001234567,89001112233,890055566377,890055566300',
});

// Example 9 - –ú–µ—Ç–æ–¥ forEach
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ forEach –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

const cal—ÅulateAverage = (...args) => {
  let total = 0;
  // for (let i = 0; i < args.length; i++) {
  args.forEach(element => (total += element));
  // }
  return total / args.length;
};

console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
console.log(cal—ÅulateAverage(14, 8, 2)); // 8
console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2
