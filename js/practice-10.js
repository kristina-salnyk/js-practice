// –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã –∏ –∫–ª–∞—Å—Å—ã

// Example 1 - –ë–ª–æ–≥–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Blogger –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å–µ–∫—Ç–∞ –±–ª–æ–≥–≥–µ—Ä–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:

// email - –ø–æ—á—Ç–∞, —Å—Ç—Ä–æ–∫–∞
// age - –≤–æ–∑—Ä–∞—Å—Ç, —á–∏—Å–ª–æ
// numberOfPosts - –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å—Å–∏–≤ —Ç–µ–º –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–≥–≥–µ—Ä
// –ö–ª–∞—Å—Å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–¥–Ω–æ–∏–º—ë–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ getInfo(), –∫–æ—Ç–æ—Ä—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É: User ${–ø–æ—á—Ç–∞} is ${–≤–æ–∑—Ä–∞—Å—Ç}
// years old and has ${ –∫–æ–ª - –≤–æ –ø–æ—Å—Ç–æ–≤ } posts.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ updatePostCount(value), –∫–æ—Ç–æ—Ä—ã–π –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ value –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//  –ø–æ—Å—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

class Blogger {
  topics = [];
  age = 0;

  constructor({ name: email, age, numberOfPosts, topics }) {
    this.email = email;
    this.age = age;
    this.numberOfPosts = numberOfPosts;
    this.topics = topics;
  }

  getInfo() {
    return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts.`;
  }

  updatePostCount(value) {
    this.numberOfPosts += value;
  }
}

const mango = new Blogger({
  name: 'mango@mail.com',
  age: 24,
  numberOfPosts: 20,
  topics: ['tech', 'cooking'],
});
console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
mango.updatePostCount(5);
console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

const poly = new Blogger({
  name: 'poly@mail.com',
  age: 19,
  numberOfPosts: 17,
  topics: ['sports', 'gaming', 'health'],
});
console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
poly.updatePostCount(4);
console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts

// Example 2 - –•—Ä–∞–Ω–∏–ª–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Storage –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–∏
// –≤—ã–∑–æ–≤–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤, –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ –≤
// —Å–≤–æ–π—Å—Ç–≤–æ items.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞:

// getItems() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤.
// addItem(item) - –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Ç–µ–∫—É—â–∏–º.
// removeItem(item) - –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–∏—Ö.

class Storage {
  items = []; // autocomplite

  constructor(items) {
    this.items = items;
  }

  addItem(item) {
    // this.items.push(item); // not recommended to use
    this.items = [...this.items, item]; // do copy of array + item
  }

  removeItem(item) {
    // this.items = this.items.filter(elem => elem !== item); // will delete all item
    const indexOfItem = this.items.indexOf(item);
    //   this.items.splice(indexOfItem, 1);

    this.items = this.items.slice(0, indexOfItem).concat(this.items.slice(indexOfItem + 1));
  }

  getItems() {
    return this.items;
  }
}

const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

const items = storage.getItems();
console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

storage.addItem('üçå');
console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

storage.removeItem('üçã');
console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å User –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ login –∏ email. –û–±—ä—è–≤–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ
//  —Å–≤–æ–π—Å—Ç–≤–∞ #login –∏ #email, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Å–¥–µ–ª–∞–π —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä login –∏ email.

class User {
  #login;
  #email;

  constructor({ login, email }) {
    this.#login = login;
    this.#email = email;
  }

  get login() {
    return this.#login;
  }

  set login(newLogin) {
    this.#login = newLogin;
  }

  get email() {
    return this.#email;
  }

  set email(newEmail) {
    this.#email = newEmail;
  }
}

const mangust = new User({
  login: 'Mango',
  email: 'mango@dog.woof',
});

console.log(mangust.login); // Mango
mangust.login = 'Mangodoge';
console.log(mangust.login); // Mangodoge

const polygust = new User({
  login: 'Poly',
  email: 'poly@mail.com',
});

console.log(polygust.login); // Poly
polygust.login = 'Polycutie';
console.log(polygust.login); // Polycutie

// Example 4 - –ó–∞–º–µ—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Notes –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∑–∞–º–µ—Ç–æ–∫ –≤ —Å–≤–æ–π—Å—Ç–≤–µ items.
// –ó–∞–º–µ—Ç–∫–∞ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ text –∏ priority.–î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ
// —Å–≤–æ–π—Å—Ç–≤–æ Priority, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã addNote(note), removeNote(text) –∏ updatePriority(text, newPriority).

class Notes {
  static Priority = {
    LOW: 'low',
    NORMAL: 'normal',
    HIGH: 'high',
  };

  items = [];

  constructor(items) {
    this.items = items;
  }

  addNote(note) {
    const alreadyExist = this.items.some(item => item.text === note.text);
    if (alreadyExist) return;
    // this.items = [...this.items, note];
    this.items = this.items.concat(note);
    // this.items.push(note);
  }

  removeNote(text) {
    // const indexOfItem = this.items.findIndex(item => item.text === text);
    // this.items = this.items.slice(0, indexOfItem).concat(this.items.slice(indexOfItem + 1));
    this.items = this.items.filter(item => item.text !== text);
  }

  updateNote(text, newPriority) {
    // const noteForUpdate = this.items.find(item => item.text === text);
    // noteForUpdate.priority = newPriority;

    this.items = this.items.map(item => {
      if (item.text === text) {
        return { ...item, priority: newPriority };
      }
      return item;
    });
  }
}

const myNotes = new Notes([]);

myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞', priority: Notes.Priority.LOW });
console.log(myNotes.items);

myNotes.addNote({
  text: '–ú–æ—è –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞',
  priority: Notes.Priority.NORMAL,
});
console.log(myNotes.items);

myNotes.removeNote('–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞');
console.log(myNotes.items);

myNotes.updateNote('–ú–æ—è –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞', Notes.Priority.HIGH);
console.log(myNotes.items);

// Example 5 - Toggle
// –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å Toggle –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ {isOpen: boolean} –∏
// –æ–±—ä—è–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ on - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª / –≤—ã–∫–ª(true / false).–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
// –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ on –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å false.

class Toggle {
  on = false;

  constructor({ isOpen } = { isOpen: false }) {
    this.on = isOpen;
  }

  toggle() {
    this.on = !this.on;
  }
}

const firstToggle = new Toggle({ isOpen: true });
console.group('firstToggle'); // groping in console
console.log(firstToggle.on);
firstToggle.toggle();
console.log(firstToggle.on);
console.groupEnd('firstToggle');

const secondToggle = new Toggle();
console.group('secondToggle');
console.log(secondToggle.on);
secondToggle.toggle();
console.log(secondToggle.on);
console.groupEnd('secondToggle');

secondToggle.toggle();
secondToggle.toggle();
secondToggle.toggle();
secondToggle.toggle();
console.log(secondToggle.on);
